import java.util.Scanner;

public class Bai10_MaTraVuong {
    private int n;
    private double a[][];
    private int Max = 0, Min = 0;
    private boolean DX = true;
    Scanner sc = new Scanner(System.in);

    // nhập ma trận
    public Bai10_MaTraVuong() {
        System.out.print("Nhap n: ");
        n = sc.nextInt();
        a = new double[n][n];
        System.out.println("nhap ma tran A:");
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                a[i][j] = sc.nextInt();
    }

    // kiểm tra max min và đối xứng hay không
    public void kiemtra() {
        int maxrow = 0, maxcol = 0, cheoc = 0, cheop = 0, minrow = 0, mincol = 0;
        for (int i = 0; i < n; i++)
            for (int j = 0; i < n; i++) {
                minrow += a[i][j];
                mincol += a[j][i];
                if (a[i][j] != a[j][i])
                    DX = false;
            }
        for (int i = 0; i < n; i++) {
            int sumrow = 0, sumcol = 0;
            for (int j = 0; j < n; j++) {
                sumrow += a[i][j];
                sumcol += a[j][i];
                if (j == i)
                    cheoc += a[i][j];
                if (j == n - i - 1)
                    cheop += a[i][j];
            }
            if (sumrow >= maxrow)
                maxrow = sumrow;
            else
                minrow = sumrow;
            if (sumcol >= maxcol)
                maxcol = sumcol;
            else
                mincol = sumcol;
        }
        Max = Math.max((Math.max(maxrow, maxcol)), (Math.max(cheoc, cheop)));
        Min = Math.min((Math.min(minrow, mincol)), (Math.min(cheoc, cheop)));
    }

    // tìm hàng, cột hoặc đường chéo có tổng phần tử lớn nhất
    public void MAX() {
        kiemtra();
        System.out.println("MAX = " + Max);
    }

    // in ra ma trận chuyển vị
    public void chuyenvi() {
        System.out.println("ma tran chuyen vi cua A: ");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
                System.out.print((int) a[j][i] + " ");
            System.out.println();
        }
    }

    // tìm hàng, cột hoặc đưòng chéo có tổng phần tử nhỏ nhất
    public void MIN() {
        kiemtra();
        System.out.println("MIN = " + Min);
    }

    // kiểm tra ma trận có đối xứng hay không
    public void kiemtradoixung() {
        if (DX == true)
            System.out.println("Ma tran la ma tran doi xung :)) ");
        else
            System.out.println("Ma tran khong phai ma tran doi xung :(( ");
    }

    // tính định thức ma trận
    public double tinhDET(double a[][], int n) {
        int s, sum = 0;
        if (n == 1)
            return a[0][0];
        if (n == 2)
            return (a[0][0] * a[1][1] - a[0][1] * a[1][0]);
        for (int k = 0; k < n; k++) {
            double b[][] = new double[n - 1][n - 1];
            for (int i = 0; i < n; i++) {
                for (int j = 1; j < n; j++) {
                    if (i < k)
                        b[i][j - 1] = a[i][j];
                    else if (i > k)
                        b[i - 1][j - 1] = a[i][j];
                }
            }
            if (k % 2 == 0)
                s = 1;
            else
                s = -1;
            sum += a[k][0] * s * tinhDET(b, n - 1);
        }
        return sum;
    }

    // in ra định thức của ma trận A
    public void DET_A() {
        System.out.println("Det A la: " + (int) tinhDET(a, n));
    }

    // tìm nghịch đảo
    public double con(double a[][], int n, int h, int c) {
        double b[][] = new double[n][n];
        int i, j, x = -1, y;
        for (i = 0; i < n; i++) {
            if (i == h)
                continue;
            x++;
            y = -1;
            for (j = 0; j < n; j++) {
                if (j == c)
                    continue;
                y++;
                b[x][y] = a[i][j];
            }
        }
        if ((h + c) % 2 == 0)
            return tinhDET(b, n - 1);
        return -tinhDET(b, n - 1);
    }

    public void nghichdao() {
        double b[][] = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                b[i][j] = con(a, n, i, j);
            }
        }
        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++) {
                double t = b[i][j];
                b[i][j] = b[j][i];
                b[j][i] = t;
            }
        double k = tinhDET(a, n);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                b[i][j] /= k;
        if (k == 0)
            System.out.println("khong co ma tran nghich dao!");
        else
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++)
                    System.out.print((double) Math.round(b[i][j] * 100) / 100 + " ");
                System.out.println();
            }
    }
    // Nhập ma trận cột B (nx1), giải hệ Phương trình tuyến tính thuần nhất n ẩn AX
    // = B bằng phương pháp Gauss
    // bài này thì xin rút lui thôi, khó vl
    // public void phuongtrinhthuannhat(){}
}
// 1 4 4 1
// 4 5 7 3
// 4 7 8 5
// 1 3 5 8
